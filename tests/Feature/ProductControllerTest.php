<?php

namespace Tests\Feature;

use App\Models\Product;
use App\Models\User;
use App\Services\UploadPhotoService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

/**
 * Тестирование всего что связано с продуктом
 */
class ProductControllerTest extends TestCase
{
    use RefreshDatabase, WithoutMiddleware, WithFaker;

    private User $user;

//    public function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        $this->user = User::factory()->create();
//    }
//
//    /**
//     * GET Маршруты для Products
//     * @var array|string[]
//     */
//    public array $routes = [
//        'allProducts',
//        'createProductForm',
//    ];
//
//    /**
//     * Генерация фейковвых фотографий
//     * @param int $count
//     * @return array
//     */
//    public function generateFakeImages(int $count): array
//    {
//        $imageArray = [];
//        for ($i = 1; $i <= $count; $i++) {
//            $imageArray[] = UploadedFile::fake()->image('photo.jpg', 500, 500)->size(100);
//        }
//        return $imageArray;
//    }
//
//    /**
//     * Проверка доступа юзера к GET маршрутам Продукта - ждем 200
//     * @return void
//     */
//    public function test_assert_products_page()
//    {
//        $this->actingAs($this->user);
//
//        foreach ($this->routes as $route) {
//            $this->get(route($route, ['id' => $this->user->id]))->assertStatus(200);
//        }
//    }
//
//    /**
//     * @return void
//     * Тест на добавление нового продукта
//     */
//    public function test_add_user_new_product()
//    {
//        $this->actingAs($this->user)->post(route('addProduct', ['id' => $this->user->id]), [
//            '_token' => csrf_token(),
//            'title' => 'Product title',
//            'description' => 'Product description',
//            'main_photo' => UploadedFile::fake()->image('avatar.jpg', 500, 500)->size(100),
//            'additional_photos' => $this->generateFakeImages(5),
//            'price' => 10,
//            'count_products' => 10,
//            'visible' => true,
//            'user_id' => $this->user->id,
//            'type' => 'Market',
//            'product_categories_id' => 1,
//        ]);
//
//        $this->assertDatabaseHas('products', [
//            'title' => 'Product title',
//            'description' => 'Product description',
//            'user_id' => $this->user->id,
//        ]);
//
//        $product = Product::first();
//
//        $this->assertSame(5, count(unserialize($product->additional_photos)));
//        $this->assertSame($this->user->id, $product->user_id);
//    }
//
//    /**
//     * @return void
//     * Тест на заваленную валидацию продукта без title
//     */
//    public function test_failed_validation_to_add_product()
//    {
//        $response = $this->post(route('addProduct', ['id' => $this->user->id]), [
//            'description' => 'Product description',
//            'main_photo' => UploadedFile::fake()->image('avatar.jpg', 500, 500)->size(100),
//            'price' => 10,
//            'count_products' => 10,
//            'visible' => true,
//            'user_id' => $this->user->id,
//        ]);
//
//        $response->assertStatus(302);
//
//        $product = Product::get();
//
//        $this->assertEquals(0, count($product));
//    }
//
//    /**
//     * @return void
//     * Тест на видимость добавленного продукта на странице
//     */
//    public function test_visible_product_fields_on_user_page()
//    {
//        $product = Product::factory(['user_id' => $this->user->id])->create();
//
//        $response = $this->get(route('userHomePage', ['slug' => $this->user->slug]));
//
//        $response->assertSeeText($product->title);
//        $response->assertSeeText($product->description);
//        $response->assertSeeText($product->price);
//    }
//
//    /**
//     * @return void
//     * Тест на оставшееся место для доп фото у продукта
//     */
//    public function test_free_space_to_additional_photos()
//    {
//        $uploadService = new UploadPhotoService();
//
//        $this->actingAs($this->user)->post(route('addProduct', ['id' => $this->user->id]), [
//            '_token' => csrf_token(),
//            'title' => 'Product title',
//            'description' => 'Product description',
//            'main_photo' => UploadedFile::fake()->image('avatar.jpg', 500, 500)->size(100),
//            'additional_photos' => $this->generateFakeImages(2),
//            'price' => 10,
//            'count_products' => 10,
//            'visible' => true,
//            'user_id' => $this->user->id,
//            'type' => 'Market',
//            'product_categories_id' => 1,
//        ]);
//
//        $this->assertDatabaseHas('products', [
//            'title' => 'Product title',
//            'description' => 'Product description',
//            'user_id' => $this->user->id,
//        ]);
//
//        $product = Product::first();
//
//        $response = $product->checkCountAdditionalPhotosInProduct($product, $this->generateFakeImages(6), 'path', $uploadService);
//
//        $this->assertEquals(3, $response);
//    }
//
//    public function test_delete_additional_photos()
//    {
//        $uploadService = new UploadPhotoService();
//
//        $this->actingAs($this->user)->post(route('addProduct', ['id' => $this->user->id]), [
//            '_token' => csrf_token(),
//            'title' => 'Product title',
//            'description' => 'Product description',
//            'main_photo' => UploadedFile::fake()->image('avatar.jpg', 500, 500)->size(100),
//            'additional_photos' => $this->generateFakeImages(5),
//            'price' => 10,
//            'count_products' => 10,
//            'visible' => true,
//            'user_id' => $this->user->id,
//            'type' => 'Market',
//            'product_categories_id' => 1,
//        ]);
//
//        $this->assertDatabaseHas('products', [
//            'title' => 'Product title',
//            'description' => 'Product description',
//            'user_id' => $this->user->id,
//        ]);
//
//        $product = Product::first();
//        $image_from_product = unserialize($product->additional_photos);
//
//        $new_product = new Product();
//        $new_product->dropAdditionalPhoto($product, $image_from_product[1], $uploadService);
//
//        $updated_product = Product::first();
//
//        $upd_image_from_product = unserialize($updated_product->additional_photos);
//
//        $this->assertEquals(4, count($upd_image_from_product));
//    }
//
//    /**
//     * Обнова продукта
//     * @return void
//     */
//    public function test_check_count_additional_photos()
//    {
//        $this->withoutExceptionHandling();
//
//        $product = Product::factory(['user_id' => $this->user->id])->create();
//
//        $this->actingAs($this->user)->patch(route('editProduct', ['id' => $this->user->id, 'product' => $product->id]), [
//            'title' => 'qqqqqqqqqqqqqq',
//            'description' => 'qqqqqqqqqqqqq',
//            'price' => 500,
//            'visible' => true,
//        ]);
//
//        $this->assertEquals('qqqqqqqqqqqqqq', Product::first()->title);
//    }
}


